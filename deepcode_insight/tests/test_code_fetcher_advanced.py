"""
Advanced test cases cho CodeFetcherAgent
Test complex scenarios, edge cases, v√† performance considerations
"""

import pytest
import tempfile
import shutil
import os
from unittest.mock import patch, MagicMock, call
from datetime import datetime
import sys

# Th√™m root directory v√†o Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from ..agents.code_fetcher import CodeFetcherAgent, validate_git_url, extract_pr_number_from_url
from git.exc import GitError, GitCommandError, InvalidGitRepositoryError


class TestCodeFetcherAgentAdvanced:
    """Advanced test scenarios cho CodeFetcherAgent"""
    
    def setup_method(self):
        """Setup test environment"""
        self.temp_dir = tempfile.mkdtemp(prefix="test_advanced_")
        self.agent = CodeFetcherAgent(workspace_dir=self.temp_dir)
    
    def teardown_method(self):
        """Cleanup test environment"""
        self.agent.cleanup()
        if os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_multiple_repository_management(self):
        """Test managing multiple repositories simultaneously"""
        repos = [
            "https://github.com/user1/repo1",
            "https://github.com/user2/repo2", 
            "https://gitlab.com/user3/repo3"
        ]
        
        with patch('git.Repo.clone_from') as mock_clone:
            mock_repos = []
            for i in range(len(repos)):
                mock_repo = MagicMock()
                mock_repo.remotes.origin.fetch = MagicMock()
                mock_repos.append(mock_repo)
            
            mock_clone.side_effect = mock_repos
            
            # Clone all repositories
            cloned_repos = []
            for repo_url in repos:
                cloned_repo = self.agent.clone_repository(repo_url)
                cloned_repos.append(cloned_repo)
            
            # Verify all repos are tracked
            assert len(self.agent.cloned_repos) == 3
            assert "user1/repo1" in self.agent.cloned_repos
            assert "user2/repo2" in self.agent.cloned_repos
            assert "user3/repo3" in self.agent.cloned_repos
            
            # Verify clone was called for each repo
            assert mock_clone.call_count == 3
    
    def test_repository_caching_behavior(self):
        """Test repository caching v√† reuse behavior"""
        repo_url = "https://github.com/test/cached-repo"
        
        with patch('git.Repo.clone_from') as mock_clone:
            mock_repo = MagicMock()
            mock_repo.remotes.origin.fetch = MagicMock()
            mock_clone.return_value = mock_repo
            
            # First clone
            repo1 = self.agent.clone_repository(repo_url)
            
            # Second call should use cached version
            repo2 = self.agent.clone_repository(repo_url)
            
            # Should be same object
            assert repo1 is repo2
            
            # Clone should only be called once
            mock_clone.assert_called_once()
            
            # Fetch should be called on second access
            assert mock_repo.remotes.origin.fetch.call_count == 1
    
    def test_large_diff_processing(self):
        """Test processing large PR diffs"""
        repo_url = "https://github.com/test/large-repo"
        pr_id = 999
        
        with patch.object(self.agent, 'clone_repository') as mock_clone:
            mock_repo = MagicMock()
            mock_clone.return_value = mock_repo
            
            # Mock successful fetch
            mock_repo.remotes.origin.fetch = MagicMock()
            
            # Mock large diff with many files
            mock_diff_items = []
            for i in range(100):  # 100 files changed
                mock_item = MagicMock()
                mock_item.a_path = f"src/file_{i}.py"
                mock_item.b_path = f"src/file_{i}.py"
                
                # Large diff content
                diff_content = f"""--- a/src/file_{i}.py
+++ b/src/file_{i}.py
@@ -1,10 +1,20 @@
 def function_{i}():
-    return "old"
+    return "new"
+    # Added comment {i}
+    # More changes
+    # Even more changes
"""
                mock_item.diff = diff_content.encode('utf-8')
                mock_diff_items.append(mock_item)
            
            # Setup mocks
            mock_pr_commit = MagicMock()
            mock_pr_commit.hexsha = "large_commit_hash"
            mock_pr_commit.message = "Large refactoring with 100 files"
            mock_pr_commit.author = "Developer"
            mock_pr_commit.committed_datetime = datetime.now()
            mock_pr_commit.parents = [MagicMock()]
            
            mock_base_commit = MagicMock()
            mock_base_commit.diff.return_value = mock_diff_items
            
            def mock_commit_lookup(ref):
                if "pull/999/head" in ref:
                    return mock_pr_commit
                return mock_base_commit
            
            mock_repo.commit.side_effect = mock_commit_lookup
            mock_repo.iter_commits.return_value = [mock_pr_commit]
            
            result = self.agent.get_pr_diff(repo_url, pr_id)
            
            # Verify large diff processing
            assert result['error'] is None
            assert len(result['files_changed']) == 100
            assert result['stats']['files'] == 100
            assert result['stats']['additions'] > 0
            assert "Large refactoring" in result['commits'][0]['message']
    
    def test_binary_file_handling(self):
        """Test handling binary files trong repository"""
        repo_url = "https://github.com/test/binary-repo"
        
        with patch.object(self.agent, 'clone_repository') as mock_clone:
            mock_repo = MagicMock()
            mock_clone.return_value = mock_repo
            
            # Mock binary file
            mock_blob = MagicMock()
            # PNG file header
            mock_blob.data_stream.read.return_value = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\x00'
            
            mock_tree = MagicMock()
            mock_tree.__getitem__.return_value = mock_blob
            mock_repo.commit.return_value.tree = mock_tree
            
            result = self.agent.get_file_content(repo_url, "image.png")
            
            # Should handle binary gracefully
            assert result is not None
            assert isinstance(result, str)
            # Binary content should be handled with error replacement
    
    def test_unicode_content_handling(self):
        """Test handling Unicode content trong files"""
        repo_url = "https://github.com/test/unicode-repo"
        
        with patch.object(self.agent, 'clone_repository') as mock_clone:
            mock_repo = MagicMock()
            mock_clone.return_value = mock_repo
            
            # Mock Unicode content
            unicode_content = "# Ti·∫øng Vi·ªát\n\nËøôÊòØ‰∏≠Êñá\n\n–≠—Ç–æ —Ä—É—Å—Å–∫–∏–π\n\nüöÄ Emoji content"
            mock_blob = MagicMock()
            mock_blob.data_stream.read.return_value = unicode_content.encode('utf-8')
            
            mock_tree = MagicMock()
            mock_tree.__getitem__.return_value = mock_blob
            mock_repo.commit.return_value.tree = mock_tree
            
            result = self.agent.get_file_content(repo_url, "unicode.md")
            
            assert result == unicode_content
            assert "Ti·∫øng Vi·ªát" in result
            assert "ËøôÊòØ‰∏≠Êñá" in result
            assert "üöÄ" in result
    
    def test_deep_directory_structure(self):
        """Test handling deep directory structures"""
        repo_url = "https://github.com/test/deep-repo"
        
        with patch.object(self.agent, 'clone_repository') as mock_clone:
            mock_repo = MagicMock()
            mock_clone.return_value = mock_repo
            
            # Mock deep file structure
            deep_files = [
                "a/b/c/d/e/f/g/h/i/j/deep_file.py",
                "src/main/java/com/example/package/subpackage/Class.java",
                "very/long/path/with/many/nested/directories/file.txt"
            ]
            
            mock_tree_items = []
            for file_path in deep_files:
                mock_item = MagicMock()
                mock_item.type = 'blob'
                mock_item.path = file_path
                mock_tree_items.append(mock_item)
            
            mock_tree = MagicMock()
            mock_tree.traverse.return_value = mock_tree_items
            mock_repo.commit.return_value.tree = mock_tree
            
            result = self.agent.list_repository_files(repo_url)
            
            assert len(result) == 3
            for file_path in deep_files:
                assert file_path in result
    
    def test_concurrent_operations_simulation(self):
        """Test simulation c·ªßa concurrent operations"""
        repo_url = "https://github.com/test/concurrent-repo"
        
        with patch('git.Repo.clone_from') as mock_clone:
            mock_repo = MagicMock()
            mock_repo.remotes.origin.fetch = MagicMock()
            mock_clone.return_value = mock_repo
            
            # Simulate multiple agents working on same repo
            agents = [CodeFetcherAgent(workspace_dir=self.temp_dir) for _ in range(3)]
            
            try:
                results = []
                for agent in agents:
                    # Each agent tries to clone same repo
                    repo = agent.clone_repository(repo_url)
                    results.append(repo)
                
                # All should succeed (though they'll use different local paths)
                assert len(results) == 3
                
            finally:
                for agent in agents:
                    agent.cleanup()
    
    def test_memory_efficient_large_repo(self):
        """Test memory efficiency v·ªõi large repositories"""
        repo_url = "https://github.com/test/huge-repo"
        
        with patch.object(self.agent, 'clone_repository') as mock_clone:
            mock_repo = MagicMock()
            mock_clone.return_value = mock_repo
            
            # Mock huge file list (10000 files)
            huge_file_list = []
            for i in range(10000):
                mock_item = MagicMock()
                mock_item.type = 'blob'
                mock_item.path = f"src/module_{i//100}/file_{i}.py"
                huge_file_list.append(mock_item)
            
            mock_tree = MagicMock()
            mock_tree.traverse.return_value = huge_file_list
            mock_repo.commit.return_value.tree = mock_tree
            
            result = self.agent.list_repository_files(repo_url)
            
            # Should handle large file lists
            assert len(result) == 10000
            assert result == sorted(result)  # Should be sorted
    
    def test_network_interruption_recovery(self):
        """Test recovery t·ª´ network interruptions"""
        repo_url = "https://github.com/test/network-repo"
        
        with patch('git.Repo.clone_from') as mock_clone:
            # First call fails with network error
            # Second call succeeds
            mock_repo = MagicMock()
            mock_repo.remotes.origin.fetch = MagicMock()
            
            mock_clone.side_effect = [
                GitCommandError("clone", "Network error"),
                mock_repo
            ]
            
            # First attempt should fail
            with pytest.raises(GitError):
                self.agent.clone_repository(repo_url)
            
            # Second attempt should succeed
            result = self.agent.clone_repository(repo_url)
            assert result == mock_repo
    
    def test_malformed_git_data_handling(self):
        """Test handling malformed Git data"""
        repo_url = "https://github.com/test/malformed-repo"
        pr_id = 123
        
        with patch.object(self.agent, 'clone_repository') as mock_clone:
            mock_repo = MagicMock()
            mock_clone.return_value = mock_repo
            
            # Mock malformed commit data
            mock_commit = MagicMock()
            mock_commit.hexsha = None  # Malformed
            mock_commit.message = ""   # Empty message
            mock_commit.author = None  # No author
            mock_commit.committed_datetime = None  # No date
            mock_commit.parents = []
            
            mock_repo.remotes.origin.fetch = MagicMock()
            mock_repo.commit.return_value = mock_commit
            mock_repo.iter_commits.return_value = [mock_commit]
            
            # Mock malformed diff
            mock_diff_item = MagicMock()
            mock_diff_item.a_path = None
            mock_diff_item.b_path = None
            mock_diff_item.diff = None
            
            mock_commit.diff.return_value = [mock_diff_item]
            
            result = self.agent.get_pr_diff(repo_url, pr_id)
            
            # Should handle malformed data gracefully
            assert 'error' in result
            assert result['error'] is not None
            # Error message c√≥ th·ªÉ vary t√πy thu·ªôc v√†o malformed data type
    
    def test_repository_with_special_characters(self):
        """Test repositories v·ªõi special characters trong names"""
        special_repos = [
            "https://github.com/user/repo-with-dashes",
            "https://github.com/user/repo_with_underscores",
            "https://github.com/user/repo.with.dots",
            "https://github.com/user-name/repo-name"
        ]
        
        for repo_url in special_repos:
            # Should parse successfully
            repo_info = self.agent._parse_repo_url(repo_url)
            assert repo_info['platform'] == 'github'
            assert repo_info['clone_url'].endswith('.git')
            
            # Should generate valid local path
            local_path = self.agent._get_repo_local_path(repo_info)
            assert os.path.isabs(local_path)
            assert self.temp_dir in local_path
    
    def test_cleanup_with_partial_failures(self):
        """Test cleanup khi c√≥ partial failures"""
        # Add repos with different cleanup behaviors
        mock_repo1 = MagicMock()
        mock_repo2 = MagicMock()
        mock_repo3 = MagicMock()
        
        # repo2 will fail to close
        mock_repo2.close.side_effect = Exception("Close failed")
        
        self.agent.cloned_repos['repo1'] = mock_repo1
        self.agent.cloned_repos['repo2'] = mock_repo2
        self.agent.cloned_repos['repo3'] = mock_repo3
        
        # Should not raise exception despite repo2 failure
        self.agent.cleanup()
        
        # repo1 should be closed, repo3 might not be called due to early exit
        mock_repo1.close.assert_called_once()
        # repo2 failed, so repo3 might not be processed
    
    def test_workspace_path_edge_cases(self):
        """Test edge cases cho workspace paths"""
        edge_case_paths = [
            "/tmp/with spaces/workspace",
            "/tmp/with-unicode-√±√°√©√≠√≥√∫/workspace",
            "/tmp/very/deep/nested/path/workspace"
        ]
        
        for workspace_path in edge_case_paths:
            try:
                # Create directory if it doesn't exist
                os.makedirs(workspace_path, exist_ok=True)
                
                agent = CodeFetcherAgent(workspace_dir=workspace_path)
                assert agent.workspace_dir == workspace_path
                assert os.path.exists(workspace_path)
                
                agent.cleanup()
                
            except (OSError, PermissionError):
                # Skip if we can't create the path
                pytest.skip(f"Cannot create workspace path: {workspace_path}")
            finally:
                # Cleanup
                if os.path.exists(workspace_path):
                    shutil.rmtree(workspace_path, ignore_errors=True)


class TestUtilityFunctionsAdvanced:
    """Advanced tests cho utility functions"""
    
    def test_extract_pr_number_complex_urls(self):
        """Test extracting PR numbers t·ª´ complex URLs"""
        complex_cases = [
            ("https://github.com/user/repo/pull/123/files#diff-abc", 123),
            ("https://github.com/user/repo/pull/456/commits/def123", 456),
            ("https://gitlab.com/group/subgroup/project/merge_requests/789?tab=overview", 789),
            ("https://bitbucket.org/team/repo/pullrequests/101/diff", 101),
            ("https://github.com/user/repo/pull/999/checks", 999),
            ("https://github.com/user/repo/pull/0", 0),  # Edge case
        ]
        
        for url, expected in complex_cases:
            result = extract_pr_number_from_url(url)
            assert result == expected
    
    def test_validate_git_url_edge_cases(self):
        """Test Git URL validation v·ªõi edge cases"""
        edge_cases = [
            ("https://github.com/a/b", True),  # Minimal valid
            ("https://github.com/user-name/repo-name", True),  # Dashes
            ("https://github.com/user_name/repo_name", True),  # Underscores
            ("https://github.com/user.name/repo.name", True),  # Dots
            ("https://github.com/123user/456repo", True),  # Numbers
                         ("https://github.com/user/repo/extra/path", True),  # Extra path - actually valid in our implementation
            ("https://github.com/user", False),  # Missing repo
            ("https://github.com//repo", False),  # Missing user
            ("https://github.com/user/", False),  # Missing repo
            ("http://github.com/user/repo", False),  # HTTP instead of HTTPS
        ]
        
        for url, expected in edge_cases:
            result = validate_git_url(url)
            assert result == expected, f"Failed for URL: {url}"


if __name__ == "__main__":
    # Ch·∫°y tests khi file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
    pytest.main([__file__, "-v"]) 