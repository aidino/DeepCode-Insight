#!/usr/bin/env python3
"""Interactive setup script cho DeepCode-Insight environment"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file interactively"""
    
    print("üîß DeepCode-Insight Environment Setup")
    print("=====================================\n")
    
    env_file = Path(".env")
    
    if env_file.exists():
        response = input("üìÅ .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Setup cancelled")
            return False
    
    print("üìù Please provide the following information:\n")
    
    # OpenAI Configuration
    print("ü§ñ OpenAI Configuration (Required for full functionality)")
    openai_key = input("OpenAI API Key (required): ").strip()
    openai_model = input("OpenAI Model [gpt-3.5-turbo]: ").strip() or "gpt-3.5-turbo"
    openai_embedding = input("OpenAI Embedding Model [text-embedding-3-small]: ").strip() or "text-embedding-3-small"
    
    # Google Configuration (Optional)
    print("\nüîç Google AI Configuration (Optional)")
    use_google = input("Do you want to configure Google AI? (y/N): ").strip().lower() == 'y'
    google_key = ""
    google_model = "gemini-pro"
    
    if use_google:
        google_key = input("Google API Key: ").strip()
        google_model = input("Google Model [gemini-pro]: ").strip() or "gemini-pro"
    
    # Qdrant Configuration
    print("\nüóÑÔ∏è Qdrant Configuration")
    qdrant_host = input("Qdrant Host [localhost]: ").strip() or "localhost"
    qdrant_port = input("Qdrant Port [6333]: ").strip() or "6333"
    qdrant_collection = input("Qdrant Collection [deepcode_context]: ").strip() or "deepcode_context"
    
    # Performance Settings
    print("\n‚ö° Performance Settings")
    use_advanced = input("Configure advanced settings? (y/N): ").strip().lower() == 'y'
    
    chunk_size = "1024"
    chunk_overlap = "200"
    vector_dimension = "1536"
    max_chunks = "50"
    
    if use_advanced:
        chunk_size = input("Chunk Size [1024]: ").strip() or "1024"
        chunk_overlap = input("Chunk Overlap [200]: ").strip() or "200"
        vector_dimension = input("Vector Dimension [1536]: ").strip() or "1536"
        max_chunks = input("Max Chunks Per File [50]: ").strip() or "50"
    
    # Create .env content
    env_content = f"""# DeepCode-Insight Environment Configuration
# Generated by setup_env.py

# OpenAI API Configuration
OPENAI_API_KEY={openai_key}
OPENAI_MODEL={openai_model}
OPENAI_EMBEDDING_MODEL={openai_embedding}

# Google API Configuration
GOOGLE_API_KEY={google_key}
GOOGLE_MODEL={google_model}

# Qdrant Configuration
QDRANT_HOST={qdrant_host}
QDRANT_PORT={qdrant_port}
QDRANT_COLLECTION={qdrant_collection}

# Application Settings
LOG_LEVEL=INFO
DEBUG=False

# Test Configuration
TEST_MODE=False
USE_MOCK_EMBEDDINGS={"True" if not openai_key else "False"}

# Performance Settings
CHUNK_SIZE={chunk_size}
CHUNK_OVERLAP={chunk_overlap}
MAX_CHUNKS_PER_FILE={max_chunks}
VECTOR_DIMENSION={vector_dimension}

# Repository Settings
DEFAULT_FILE_PATTERNS=*.py,*.java,*.js,*.ts,*.go,*.rs
MAX_FILE_SIZE_MB=10
EXCLUDE_PATTERNS=__pycache__,node_modules,.git,*.pyc,*.class
"""
    
    # Write .env file
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        print(f"\n‚úÖ .env file created successfully!")
        
        # Validate configuration
        print("\nüîç Validating configuration...")
        
        # Import and test config
        project_root = os.path.dirname(os.path.dirname(__file__))
        sys.path.append(project_root)
        from deepcode_insight.config import config
        
        config.print_config()
        
        if config.validate():
            print("\n‚úÖ Configuration is valid!")
        else:
            print("\n‚ö†Ô∏è Configuration has warnings (see above)")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")
        return False

def test_setup():
    """Test the setup"""
    
    print("\nüß™ Testing Setup")
    print("================\n")
    
    try:
        # Test config loading
        print("1. Testing config loading...")
        from deepcode_insight.config import config
        print("   ‚úÖ Config loaded successfully")
        
        # Test Qdrant connection
        print("\n2. Testing Qdrant connection...")
        from qdrant_client import QdrantClient
        
        client = QdrantClient(host=config.QDRANT_HOST, port=config.QDRANT_PORT)
        collections = client.get_collections()
        print(f"   ‚úÖ Qdrant connected ({len(collections.collections)} collections)")
        
        # Test OpenAI API if key provided
        if config.OPENAI_API_KEY and config.OPENAI_API_KEY != "your_openai_api_key_here":
            print("\n3. Testing OpenAI API...")
            from openai import OpenAI
            
            client = OpenAI(api_key=config.OPENAI_API_KEY)
            response = client.embeddings.create(
                model=config.OPENAI_EMBEDDING_MODEL,
                input="test"
            )
            print(f"   ‚úÖ OpenAI API working (dimension: {len(response.data[0].embedding)})")
        else:
            print("\n3. OpenAI API test skipped (no API key)")
        
        print(f"\nüéâ Setup test completed successfully!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Setup test failed: {e}")
        return False

def main():
    """Main setup function"""
    
    print("üöÄ Welcome to DeepCode-Insight Setup!\n")
    
    # Check if we're in the right directory
    project_root = os.path.dirname(os.path.dirname(__file__))
    config_path = os.path.join(project_root, "config.py")
    if not os.path.exists(config_path):
        print("‚ùå Please run this script from the DeepCode-Insight root directory")
        print(f"‚ùå Looking for config.py at: {config_path}")
        sys.exit(1)
    
    # Change to project root
    os.chdir(project_root)
    
    # Create .env file
    if not create_env_file():
        sys.exit(1)
    
    # Test setup
    if not test_setup():
        print("\n‚ö†Ô∏è Setup completed but tests failed. Please check your configuration.")
        sys.exit(1)
    
    print(f"\nüéØ Next Steps:")
    print(f"1. Start Qdrant: docker compose up -d")
    print(f"2. Run tests: python test_rag_simple.py")
    print(f"3. Run real data tests: python test_rag_real_data.py")
    print(f"4. Start using RAGContextAgent!")
    
    print(f"\nüìö Documentation:")
    print(f"- Setup Guide: docs/README_SETUP.md")
    print(f"- RAG Guide: docs/README_RAG.md")
    print(f"- Implementation: docs/RAG_IMPLEMENTATION_SUMMARY.md")

if __name__ == "__main__":
    main() 